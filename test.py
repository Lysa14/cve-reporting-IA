import os
import json

# Fonction pour charger les données CVE à partir d'un fichier JSON
def load_cve_data(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            cve_data = json.load(file)
        return cve_data
    except json.JSONDecodeError as e:
        print(f"Erreur lors du chargement du fichier {filepath}: {e}")
        return None

# Parcourir récursivement les fichiers JSON et récupérer les données CVE
def retrieve_cves(directory):
    cve_entries = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.json'):
                filepath = os.path.join(root, file)
                print(f"Traitement du fichier : {filepath}")  # Affichage du chemin du fichier
                cve_data = load_cve_data(filepath)
                if cve_data:
                    cve_entry = {
                        "CVE": cve_data.get("cveMetadata", {}).get("cveId", "N/A"),
                        "Description": cve_data.get("containers", {}).get("cna", {}).get("descriptions", [{}])[0].get("value", "N/A")
                    }
                    cve_entries.append(cve_entry)
    return cve_entries

def main():
    # Chemin vers le dossier principal contenant les données CVE
    cves_directory = '/home/lysa/cve-AI/cve-reporting-IA/data/cves/2024/'

    # Récupérer tous les CVE dans la structure de dossiers
    all_cves = retrieve_cves(cves_directory)

    # Afficher les CVE récupérés
    for idx, cve in enumerate(all_cves, start=1):
        print(f"CVE {idx}:")
        print(f" - ID: {cve['CVE']}")
        print(f" - Description: {cve['Description']}")
        print("---")

# Appel de la fonction principale si ce fichier est exécuté directement
if __name__ == "__main__":
    main()
